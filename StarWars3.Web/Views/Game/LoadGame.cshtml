@using StarWars3.Web.Controllers;
@model StarWars3.Web.ViewModels.Game.PlayerId
@{
	ViewBag.Title = "ShowGame";
}

<div class="containerStyle well">
	<table>
		<tr>
			<td class="container menuStyle">
				<input type="button" class="button" id="showGame" value="Show Game" />

				<div class="buildings" id="buildings">
					<input type="button" class="buildings" id="buildGasFactory" value="Build Gas Factory" />
					<input type="button" class="buildings" id="buildMetalFactory" value="Build Metal Factory" />
					<input type="button" class="buildings" id="buildMineralsFactory" value="Build Minerals Factory" />
				</div>

				<div class="units" id="units">
					@*<input type="button" class="units" id="buildDeathStar" value="Build Death Star" />*@
					<input type="button" class="units" id="buildDestroyer" value="Build Destroyer" />
					<input type="button" class="units" id="buildFighter" value="Build Fighter" />
				</div>

				<div class="unitsStats" id="unitsStats">
					<div class="unitsStats">UNIT STATISTICS</div>
				</div>

				<span id="info"></span>
			</td>
			<td>
				<div style="position: relative; width:1000px; height:700px">
					<canvas class="canvas" id="hexmap" width="1000" height="700"></canvas>
				</div>
			</td>
		</tr>
	</table>

<script type="text/javascript">

    $(function () {

        let unitsStats = $("#unitsStats");
        let buildings = $("#buildings");
        let units = $("#units");

        unitsStats.hide();
        buildings.hide();
        units.hide();

		///////////////////////////
		/////////// SIGNALR JS
		//////////////////////////
		$.connection.hub.start();
		var game = $.connection.game;

		///////////////////////////////////////////////////////////////////
		//// ON BOARD CLICK SHOW MENUS
		//////////////////////////////////////////////////////////////////////////
		game.client.showUnitsStats = function (unit) {

		    unitsStats.find('ul').remove('.stats');

		    let ul = $('<ul class="stats">').css('list-style', 'none');
		    let level = $('<li>').text('Level: ' + unit.Level);
		    let helt = $('<li>').text('Healt: ' + unit.Health);
		    let atack = $('<li>').text('Atack: ' + unit.Damage);
		    let shield = $('<li>').text('Shield: ' + unit.Shield);
		    let armor = $('<li>').text('Armor: ' + unit.Armor);
		    let speed = $('<li>').text('Speed: ' + unit.Speed);
		    let fuel = $('<li>').text('Fuel: ' + unit.FuelConsumption);

		    ul.append(level)
                .append(helt)
                .append(atack)
                .append(shield)
                .append(armor)
                .append(speed)
                .append(fuel);

		    units.hide();
		    buildings.hide();
			unitsStats.show().append(ul);
		}

		game.client.showUnitsMenu = function () {
		    units.show();
			buildings.hide();
			unitsStats.hide();
			unitsStats.find('ul').remove('.stats');
		}

		game.client.showBuildingsMenu = function () {
		    units.hide();
			buildings.show();
			unitsStats.hide();
			unitsStats.find('ul').remove('.stats');
		}

		game.client.hideMenu = function () {
		    units.hide();
			buildings.hide();
			unitsStats.hide();
			unitsStats.find('ul').remove('.stats');
		}


		///////////////////////////////////////////////////////////////////
		//// MENU BUTTONS EVENTS
		//////////////////////////////////////////////////////////////////////////
		$('#showGame').click(function ()
		{
			game.server.showGame(@Model.Id);
		});
		$('#buildGasFactory').click(function () {
			game.server.buildGasFactory();
		});

		$('#buildMetalFactory').click(function () {
			game.server.buildMetalFactory();
		});

		$('#buildMineralsFactory').click(function () {
			game.server.buildMineralsFactory();
		});

		$('#buildFighter').click(function () {
			game.server.buildFighter();
		});
		$('#buildDestroyer').click(function () {
		    game.server.buildDestroyer();
		});

		//////////////////////////////////////////////////////////////
		///////////// HEX BOARD CANVAS AND VARIABLES INITIALISATIONS  
		//////////////////////////////////////////////////////////////
		var canvas = document.getElementById('hexmap');
		var ctx = canvas.getContext('2d');

		var hexHeight,
			hexRadius,
			rectangleHeight,
			rectangleWidth,
			hexagonAngle = 0.523598776, // 30 degrees in radians
			cols = 20,
			rows = 16,
			boardWidth = 1000,
			sideLength,
			gameObjects;

		rectangleWidth = (boardWidth / (cols + 0.5));// hex width
		sideLength = (rectangleWidth / 2) / Math.cos(hexagonAngle);
		hexHeight = sideLength * 2;//Math.sin(hexagonAngle) * sideLength;
		hexRadius = rectangleWidth / 2;//Math.cos(hexagonAngle) * sideLength;
		rectangleHeight = 2 * sideLength;//hex height

		/////// MOUSE EVENTS LISTENERS /////////
		if (canvas.getContext)
		{
			ctx.fillStyle = "rgba(200, 0, 0, 0.4)";
			ctx.strokeStyle = "rgba(0, 200, 0, 0.2)";
			ctx.lineWidth = 1;

			canvas.addEventListener("mousedown", function (eventInfo)
			{
				var x,
					y,
					hexX,
					hexY,
					screenX,
					screenY;

				x = eventInfo.offsetX || eventInfo.layerX;
				y = eventInfo.offsetY || eventInfo.layerY;
				y = y - sideLength / 3;

				hexY = Math.floor(y / (hexHeight - (sideLength / 2)));
				hexX = Math.floor((x - (hexY % 2) * hexRadius) / (rectangleWidth));

				screenX = (hexX * rectangleWidth) + ((hexY % 2) * hexRadius);
				screenY = hexY * (hexHeight - (sideLength / 2));

				game.server.onMouseDown(hexY, hexX);
			});

			canvas.addEventListener("mousemoveDisable", function (eventInfo)
			{
				var x,
					y,
					hexX,
					hexY,
					screenX,
					screenY;

				x = eventInfo.offsetX || eventInfo.layerX;
				y = eventInfo.offsetY || eventInfo.layerY;
				y = y - sideLength / 3;
				hexY = Math.floor(y / (hexHeight - (sideLength / 2)));
				hexX = Math.floor((x - (hexY % 2) * hexRadius) / (rectangleWidth));

				screenX = (hexX * rectangleWidth) + ((hexY % 2) * hexRadius);
				screenY = hexY * (hexHeight - (sideLength / 2));

				ctx.clearRect(0, 0, canvas.width, canvas.height);

				drawBoard(ctx, cols, rows);

				// Check if the mouse's coords are on the board
				if (hexX >= 0 && hexX < cols) {
					if (hexY >= 0 && hexY < rows) {
						ctx.fillStyle = "rgba(200, 0, 0, 0.4)";
						drawHexagon(ctx, screenX, screenY, true);
						//drawImage(ctx, screenX, screenY, rectangleWidth, rectangleHeight, sideLength);
					}
				}
			});
		}


		////////////////////////////////////////////////////////////////////
		///////////  DRAW GAME OBJECTS
		///////////////////////////////////////////////////////////////////////

		/// BASE DRAWING FUNCTION //////////////////////
		function drawObject(row, col, ctxImage)
		{
			var x = (col * rectangleWidth) + ((row % 2) * hexRadius);
			var y = (row * (hexHeight - (sideLength / 2))) + (sideLength / 4);

			ctx.fillStyle = "rgba(200, 0, 0, 0.4)";
			ctx.strokeStyle = "rgba(0, 200, 0, 0.2)";
			ctx.lineWidth = 1;

			ctx.drawImage(ctxImage, x, y, rectangleWidth, rectangleWidth);
		}

        ///////// SIGNALR OBJECTS DRAWING FUNCTIONS //////
		game.client.drawGameObject = function (row, col, img) {
		    var ctxImage = new Image();
		    ctxImage.src = "data:image/png;base64," + img;
		    drawObject(row, col, ctxImage);
		}

		game.client.markHexagonAsSelected = function (row, col) {

			screenX = (col * rectangleWidth) + ((row % 2) * hexRadius);
			screenY = row * (hexHeight - (sideLength / 2));

			//draw red hexagon
			ctx.strokeStyle = "rgba(200, 0, 0, 1)";
			drawHexagon(ctx, screenX, screenY, false);

			//return color to green
			ctx.strokeStyle = "rgba(0, 200, 0, 0.2)";
		}

		game.client.clearBoard = function () {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
		}

		game.client.drawBoard = function (rows,cols)
		{
			var i,
				j;

			for (i = 0; i < cols; ++i) {
				for (j = 0; j < rows; ++j) {
					drawHexagon(
						ctx,
						i * rectangleWidth + ((j % 2) * hexRadius),
						j * (hexHeight - (sideLength / 2)),
						false
					);
				}
			}
		}

		///////////////////////////////////////////////////////////////
		/////////// DRAW HEXAGON
		//////////////////////////////////////////////////////////////
		function drawHexagon(canvasContext, x, y, fill)
		{
			//var fill = fill || false;

			canvasContext.beginPath();
			canvasContext.moveTo(x + hexRadius, y);
			canvasContext.lineTo(x + rectangleWidth, y + sideLength / 2);
			canvasContext.lineTo(x + rectangleWidth, y + sideLength / 2 + sideLength);
			canvasContext.lineTo(x + hexRadius, y + rectangleHeight);
			canvasContext.lineTo(x, y + sideLength / 2 + sideLength);
			canvasContext.lineTo(x, y + sideLength / 2);
			canvasContext.closePath();

			canvasContext.stroke();

			//if (fill) {
			//	canvasContext.fill();
			//} else {
			//	canvasContext.stroke();
			//}
		}
	});

</script>
</div>